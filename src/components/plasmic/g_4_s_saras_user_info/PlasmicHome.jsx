// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8mmkHFwQph4WbSrTdocf73
// Component: OQFBQhJe8dJ8
import * as React from "react";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsgMqIqQaNt9Z9 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: gMqIQQaNT9z9/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8mmkHFwQph4WbSrTdocf73/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: OQFBQhJe8dJ8/css
import SupportAgentIcon from "./icons/PlasmicIcon__SupportAgent"; // plasmic-import: hxkJq_rhB8wm/icon
import ForwardToInboxIcon from "./icons/PlasmicIcon__ForwardToInbox"; // plasmic-import: JKXmaAPgaNwC/icon
import UnionIcon from "./icons/PlasmicIcon__Union"; // plasmic-import: RFXzy1EYv_Bf/icon
import vectorOpTnDeGeqjx from "./images/vector.svg"; // plasmic-import: op-TNDeGEQJX/picture

createPlasmicElementProxy;

export const PlasmicHome__VariantProps = new Array();

export const PlasmicHome__ArgProps = new Array();

const $$ = {};

function PlasmicHome__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgMqIqQaNt9Z9()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__t9YwA)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"figmaPaste"}
                data-plasmic-override={overrides.figmaPaste}
                hasGap={true}
                className={classNames(projectcss.all, sty.figmaPaste)}
              >
                <div
                  data-plasmic-name={"image41"}
                  data-plasmic-override={overrides.image41}
                  className={classNames(projectcss.all, sty.image41)}
                />

                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8Jv3K
                    )}
                  >
                    {"Welcome to"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bo5OR
                    )}
                  >
                    {"G4S Indonesia"}
                  </div>
                </div>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__qq69)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame379"}
                data-plasmic-override={overrides.frame379}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame379)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame378"}
                  data-plasmic-override={overrides.frame378}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame378)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame377"}
                    data-plasmic-override={overrides.frame377}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame377)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xb81D
                      )}
                    >
                      {"Contact Us"}
                    </div>
                    <Stack__
                      as={PlasmicLink__}
                      data-plasmic-name={"frame368"}
                      data-plasmic-override={overrides.frame368}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.frame368
                      )}
                      href={"tel:(021)30405959"}
                      platform={"react"}
                    >
                      <SupportAgentIcon
                        className={classNames(projectcss.all, sty.svg__pGSc)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Nl4H
                        )}
                      >
                        {"Hotline"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      data-plasmic-name={"frame370"}
                      data-plasmic-override={overrides.frame370}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.frame370
                      )}
                      href={`/mailform`}
                      platform={"react"}
                    >
                      <ForwardToInboxIcon
                        className={classNames(projectcss.all, sty.svg__vuQkT)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___96MJr
                        )}
                      >
                        {"Email"}
                      </div>
                    </Stack__>
                    <Stack__
                      as={PlasmicLink__}
                      data-plasmic-name={"frame369"}
                      data-plasmic-override={overrides.frame369}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.frame369
                      )}
                      href={"https://wa.me/628119790343"}
                      platform={"react"}
                    >
                      <UnionIcon
                        className={classNames(projectcss.all, sty.svg__mPfsv)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__el24O
                        )}
                      >
                        {"Whatsapp"}
                      </div>
                    </Stack__>
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"button"}
                  data-plasmic-name={"frame376"}
                  data-plasmic-override={overrides.frame376}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    sty.frame376
                  )}
                  ref={ref => {
                    $refs["frame376"] = ref;
                  }}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame371"}
                    data-plasmic-override={overrides.frame371}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame371)}
                  >
                    <PlasmicImg__
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"56px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"48px"}
                      loading={"lazy"}
                      src={{
                        src: vectorOpTnDeGeqjx,
                        fullWidth: 48,
                        fullHeight: 56,
                        aspectRatio: 0.857143
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m2XYn
                      )}
                      onClick={async event => {
                        const $steps = {};
                        $steps["downloadSarasUserGuide"] = true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://storage.googleapis.com/saras-bucket/User%20Guidance%20SARAS%20(Keypad)%20For%20User.pdf"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["downloadSarasUserGuide"] != null &&
                          typeof $steps["downloadSarasUserGuide"] ===
                            "object" &&
                          typeof $steps["downloadSarasUserGuide"].then ===
                            "function"
                        ) {
                          $steps["downloadSarasUserGuide"] = await $steps[
                            "downloadSarasUserGuide"
                          ];
                        }
                      }}
                    >
                      {"User Guide\nSaras App"}
                    </div>
                  </Stack__>
                </Stack__>
              </Stack__>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "figmaPaste",
    "image41",
    "freeBox",
    "frame379",
    "frame378",
    "frame377",
    "frame368",
    "frame370",
    "frame369",
    "frame376",
    "frame371",
    "img"
  ],

  columns: [
    "columns",
    "figmaPaste",
    "image41",
    "freeBox",
    "frame379",
    "frame378",
    "frame377",
    "frame368",
    "frame370",
    "frame369",
    "frame376",
    "frame371",
    "img"
  ],

  figmaPaste: ["figmaPaste", "image41", "freeBox"],
  image41: ["image41"],
  freeBox: ["freeBox"],
  frame379: [
    "frame379",
    "frame378",
    "frame377",
    "frame368",
    "frame370",
    "frame369",
    "frame376",
    "frame371",
    "img"
  ],

  frame378: ["frame378", "frame377", "frame368", "frame370", "frame369"],
  frame377: ["frame377", "frame368", "frame370", "frame369"],
  frame368: ["frame368"],
  frame370: ["frame370"],
  frame369: ["frame369"],
  frame376: ["frame376", "frame371", "img"],
  frame371: ["frame371", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    image41: makeNodeComponent("image41"),
    freeBox: makeNodeComponent("freeBox"),
    frame379: makeNodeComponent("frame379"),
    frame378: makeNodeComponent("frame378"),
    frame377: makeNodeComponent("frame377"),
    frame368: makeNodeComponent("frame368"),
    frame370: makeNodeComponent("frame370"),
    frame369: makeNodeComponent("frame369"),
    frame376: makeNodeComponent("frame376"),
    frame371: makeNodeComponent("frame371"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
